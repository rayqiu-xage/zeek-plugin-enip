// This file is automatically generated from /home/ray/workspace/zeek-plugin-enip/src/enip.pac.

#ifndef _home_ray_workspace_zeek_plugin_enip_src_enip_pac_h
#define _home_ray_workspace_zeek_plugin_enip_src_enip_pac_h

#include <vector>

#include "binpac.h"


#include "zeek/binpac_zeek.h"


    #include "events.bif.h"
    
namespace binpac {

namespace ENIP {
class ContextENIP;
enum command_codes {
	NOP = 0,
	LIST_SERVICES = 4,
	LIST_IDENTITY = 99,
	LIST_INTERFACES = 100,
	REGISTER_SESSION = 101,
	UNREGISTER_SESSION = 102,
	SEND_RR_DATA = 111,
	SEND_UNIT_DATA = 112,
	INDICATE_STATUS = 114,
	CANCEL = 115,
};
enum status_codes {
	SUCCESS = 0,
	INVALID_UNSUPPORTED_CMD = 1,
	INSUFFICIENT_MEMORY = 2,
	INCORRECT_DATA = 3,
	INVALID_SESSION_HANDLE = 100,
	INVALID_LENGTH = 101,
	UNSUPPORTED_PROTOCOL_REVISION = 105,
	ENCAP_HEADER_ERROR = 106,
};
enum common_data_format_type_ids {
	CDF_NULL = 0,
	LIST_IDENTITY_RESPONSE = 12,
	CONNECTION_BASED = 161,
	CONNECTED_TRANSPORT = 177,
	UNCONNECTED_MESSAGE = 178,
	LIST_SERVICES_RESPONSE = 256,
	SOCK_ADDR_INFO_OT = 32768,
	SOCK_ADDR_INFO_TO = 32769,
	SEQUENCED_ADDRESS_ITEM = 32770,
	UNCONNECTED_MESSAGE_DTLS = 32771,
};
enum state_attribute {
	NON_EXISTENT = 0,
	CONFIGURING = 1,
	WAITING_CONN_ID = 2,
	ESTABLISHED = 3,
	TIMED_OUT = 4,
	CLOSING = 6,
};
enum instance_type_attribute {
	EXPLICIT_MESSAGING = 0,
	IO = 1,
	CIP_BRIDGED = 2,
};
enum transport_class_trigger {
	TRANSPORT_CLASS = 15,
	PRODUCTION_TRIGGER = 112,
	DIR = 128,
};
enum segment_types {
	ELEMENT_8B = 40,
	ELEMENT_16B = 41,
	ELEMENT_32B = 42,
	CLASS_8B = 32,
	CLASS_16B = 33,
	INSTANCE_8B = 36,
	INSTANCE_16B = 37,
	ATTRIBUTE_8B = 48,
	ATTRIBUTE_16B = 49,
	ANSI = 145,
};
enum services {
	GET_ATTRIBUTE_ALL = 1,
	MULTIPLE_SERVICE_PACKET = 3,
	GET_ATTRIBUTE_LIST = 10,
	GET_ATTRIBUTE_SINGLE = 14,
	EXECUTE_PCCC_SERVICE = 75,
	READ_TAG = 76,
	WRITE_TAG = 77,
	READ_MODIFY_WRITE_TAG = 78,
	READ_TAG_REPLY = 204,
	WRITE_TAG_REPLY = 205,
	READ_MODIFY_WRITE_TAG_REPLY = 206,
	READ_TAG_FRAGMENTED = 82,
	WRITE_TAG_FRAGMENTED = 83,
	FORWARD_OPEN = 84,
	GET_INSTANCE_ATTRIBUTE_LIST = 85,
	READ_TAG_FRAGMENTED_REPLY = 210,
	WRITE_TAG_FRAGMENTED_REPLY = 211,
	GET_INSTANCE_ATTRIBUTE_LIST_REPLY = 213,
	GET_ATTRIBUTE_ALL_REPLY = 129,
	GET_ATTRIBUTE_LIST_REPLY = 131,
	MULTIPLE_SERVICE_PACKET_REPLY = 138,
	GET_ATTRIBUTE_SINGLE_REPLY = 142,
};
enum tag_types {
	BOOL = 193,
	SINT = 194,
	INT = 195,
	DINT = 196,
	LINT = 197,
	REAL = 202,
	DWORD = 211,
};
enum tag_err {
	BAD_PARAMETER = 3,
	SYNTAX_ERROR = 4,
	DESTINATION_UNKOWN = 5,
	INSUFICIENT_SPACE = 6,
	STATE_CONFLICT = 16,
	INSUFICIENT_DATA = 19,
	WRONG_PATH_SIZE = 38,
	GENERAL_ERROR = 255,
};
class ENIP_PDU;
class ENIP_UDP;
class ENIP_Request;
class ENIP_Response;
class ENIP;
class Target_Item;
class Target_Item_Services;
class Register;
class RR_Unit;
class Common_Packet_Format;
class Address;
class Data;
class UCMM;
class Sock_Info;
class Nop;
class List_Services;
class List_Identity;
class List_Interfaces;
class Type_Data;
class Read_Tag;
class Read_Tag_Reply;
class Read_Tag_Fragmented;
class Read_Tag_Fragmented_Reply;
class Write_Tag;
class Write_Tag_Fragmented;
class Read_Modify_Write_Tag;
class Multiple_Service_Packet;
class Get_Instance_Attribute_List;
class Attribute;
class Get_Instance_Attribute_List_Reply;
class Get_Attribute_List;
class Attribute_Success_Value;
class Get_Attribute_List_Reply;
class Message_Request;
class Message_Reply;
class Forward_Open;
class CIP_PDU;
class Connexion_Bind;
class Application_Lookup_Service_Response;
class ENIP_Conn;
class ENIP_Flow;
} // namespace ENIP

int bytestring_to_int(const_bytestring const & s, int base);
double bytestring_to_double(const_bytestring const & s);
int bytestring_casecmp(const_bytestring const & s1, const_charptr const & s2);
bool bytestring_caseprefix(const_bytestring const & s1, const_charptr const & s2);
double network_time();
namespace ENIP {

class ContextENIP final
{
public:
	ContextENIP(ENIP_Conn * connection, ENIP_Flow * flow);
	~ContextENIP();
	
	// Member access functions
	ENIP_Conn * connection() const { return connection_; }
	ENIP_Flow * flow() const { return flow_; }
	
protected:
	ENIP_Conn * connection_;
	ENIP_Flow * flow_;
};


class ENIP_PDU final
{
public:
	ENIP_PDU(bool is_orig);
	~ENIP_PDU();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextENIP * t_context);
	
	// Member access functions
	int val_case_index() const	{ return val_case_index_; }
	ENIP_Request * request() const
		{
		switch ( val_case_index() )
			{
			case ((bool) 1):
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/ray/workspace/zeek-plugin-enip/src/enip-protocol.pac:179:request", (int64)val_case_index(), "true");
				break;
			}
		return request_;
		}
	ENIP_Response * response() const
		{
		switch ( val_case_index() )
			{
			case ((bool) 0):
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/ray/workspace/zeek-plugin-enip/src/enip-protocol.pac:180:response", (int64)val_case_index(), "false");
				break;
			}
		return response_;
		}
	bool is_orig() const { return is_orig_; }
	int byteorder() const { return byteorder_; }
	
protected:
	int val_case_index_;
	ENIP_Request * request_;
	ENIP_Response * response_;
	bool is_orig_;
	int byteorder_;
};


class ENIP_UDP final
{
public:
	ENIP_UDP();
	~ENIP_UDP();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextENIP * t_context);
	
	// Member access functions
	Common_Packet_Format * data() const { return data_; }
	int byteorder() const { return byteorder_; }
	
protected:
	Common_Packet_Format * data_;
	int byteorder_;
};


class ENIP_Request final
{
public:
	ENIP_Request();
	~ENIP_Request();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextENIP * t_context);
	
	// Member access functions
	ENIP * header() const { return header_; }
	uint16 data_case_index() const	{ return data_case_index_; }
	Nop * nop() const
		{
		switch ( data_case_index() )
			{
			case ((uint16) 0):
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/ray/workspace/zeek-plugin-enip/src/enip-protocol.pac:191:nop", (int64)data_case_index(), "NOP");
				break;
			}
		return nop_;
		}
	Register * register_session() const
		{
		switch ( data_case_index() )
			{
			case ((uint16) 101):
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/ray/workspace/zeek-plugin-enip/src/enip-protocol.pac:192:register_session", (int64)data_case_index(), "REGISTER_SESSION");
				break;
			}
		return register_session_;
		}
	RR_Unit * send_rr_data() const
		{
		switch ( data_case_index() )
			{
			case ((uint16) 111):
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/ray/workspace/zeek-plugin-enip/src/enip-protocol.pac:194:send_rr_data", (int64)data_case_index(), "SEND_RR_DATA");
				break;
			}
		return send_rr_data_;
		}
	RR_Unit * send_unit_data() const
		{
		switch ( data_case_index() )
			{
			case ((uint16) 112):
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/ray/workspace/zeek-plugin-enip/src/enip-protocol.pac:195:send_unit_data", (int64)data_case_index(), "SEND_UNIT_DATA");
				break;
			}
		return send_unit_data_;
		}
	bytestring const & unknown() const
		{
		return unknown_;
		}
	int byteorder() const { return byteorder_; }
	
protected:
	ENIP * header_;
	uint16 data_case_index_;
	Nop * nop_;
	Register * register_session_;
	RR_Unit * send_rr_data_;
	RR_Unit * send_unit_data_;
	bytestring unknown_;
	int byteorder_;
};


class ENIP_Response final
{
public:
	ENIP_Response();
	~ENIP_Response();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextENIP * t_context);
	
	// Member access functions
	ENIP * header() const { return header_; }
	uint16 data_case_index() const	{ return data_case_index_; }
	List_Services * list_services() const
		{
		switch ( data_case_index() )
			{
			case ((uint16) 4):
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/ray/workspace/zeek-plugin-enip/src/enip-protocol.pac:204:list_services", (int64)data_case_index(), "LIST_SERVICES");
				break;
			}
		return list_services_;
		}
	List_Identity * list_identity() const
		{
		switch ( data_case_index() )
			{
			case ((uint16) 99):
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/ray/workspace/zeek-plugin-enip/src/enip-protocol.pac:205:list_identity", (int64)data_case_index(), "LIST_IDENTITY");
				break;
			}
		return list_identity_;
		}
	List_Interfaces * list_interfaces() const
		{
		switch ( data_case_index() )
			{
			case ((uint16) 100):
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/ray/workspace/zeek-plugin-enip/src/enip-protocol.pac:206:list_interfaces", (int64)data_case_index(), "LIST_INTERFACES");
				break;
			}
		return list_interfaces_;
		}
	Register * register_session() const
		{
		switch ( data_case_index() )
			{
			case ((uint16) 101):
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/ray/workspace/zeek-plugin-enip/src/enip-protocol.pac:207:register_session", (int64)data_case_index(), "REGISTER_SESSION");
				break;
			}
		return register_session_;
		}
	Register * unregister_session() const
		{
		switch ( data_case_index() )
			{
			case ((uint16) 102):
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/ray/workspace/zeek-plugin-enip/src/enip-protocol.pac:208:unregister_session", (int64)data_case_index(), "UNREGISTER_SESSION");
				break;
			}
		return unregister_session_;
		}
	RR_Unit * send_rr_data() const
		{
		switch ( data_case_index() )
			{
			case ((uint16) 111):
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/ray/workspace/zeek-plugin-enip/src/enip-protocol.pac:209:send_rr_data", (int64)data_case_index(), "SEND_RR_DATA");
				break;
			}
		return send_rr_data_;
		}
	bytestring const & unknown() const
		{
		return unknown_;
		}
	int byteorder() const { return byteorder_; }
	
protected:
	ENIP * header_;
	uint16 data_case_index_;
	List_Services * list_services_;
	List_Identity * list_identity_;
	List_Interfaces * list_interfaces_;
	Register * register_session_;
	Register * unregister_session_;
	RR_Unit * send_rr_data_;
	bytestring unknown_;
	int byteorder_;
};


class ENIP final
{
public:
	ENIP();
	~ENIP();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextENIP * t_context);
	
	// Member access functions
	uint16 command() const { return command_; }
	uint16 length() const { return length_; }
	uint32 session_handle() const { return session_handle_; }
	uint32 status() const { return status_; }
	bytestring const & sender_context() const { return sender_context_; }
	uint32 options() const { return options_; }
	int byteorder() const { return byteorder_; }
	bool proc() const { return proc_; }
	
protected:
	uint16 command_;
	uint16 length_;
	uint32 session_handle_;
	uint32 status_;
	bytestring sender_context_;
	uint32 options_;
	int byteorder_;
	bool proc_;
};


class Target_Item final
{
public:
	Target_Item();
	~Target_Item();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextENIP * t_context);
	
	// Member access functions
	uint16 type_code() const { return type_code_; }
	uint16 len() const { return len_; }
	vector<Common_Packet_Format *> * data() const { return data_; }
	int byteorder() const { return byteorder_; }
	bool proc() const { return proc_; }
	
protected:
	uint16 type_code_;
	uint16 len_;
	vector<Common_Packet_Format *> * data_;
	Common_Packet_Format * data__elem_;
	int byteorder_;
	bool proc_;
};


class Target_Item_Services final
{
public:
	Target_Item_Services();
	~Target_Item_Services();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextENIP * t_context);
	
	// Member access functions
	uint16 type_code() const { return type_code_; }
	uint16 length() const { return length_; }
	uint16 protocol() const { return protocol_; }
	uint16 flags() const { return flags_; }
	bytestring const & name() const { return name_; }
	int byteorder() const { return byteorder_; }
	bool proc() const { return proc_; }
	
protected:
	uint16 type_code_;
	uint16 length_;
	uint16 protocol_;
	uint16 flags_;
	bytestring name_;
	int byteorder_;
	bool proc_;
};


class Register final
{
public:
	Register();
	~Register();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextENIP * t_context);
	
	// Member access functions
	uint16 protocol() const { return protocol_; }
	uint16 options() const { return options_; }
	int byteorder() const { return byteorder_; }
	bool proc() const { return proc_; }
	
protected:
	uint16 protocol_;
	uint16 options_;
	int byteorder_;
	bool proc_;
};


class RR_Unit final
{
public:
	RR_Unit(ENIP * header);
	~RR_Unit();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextENIP * t_context);
	
	// Member access functions
	uint32 iface_handle() const { return iface_handle_; }
	uint16 timeout() const { return timeout_; }
	Common_Packet_Format * cpf() const { return cpf_; }
	Message_Request * cip_data() const { return cip_data_; }
	ENIP * header() const { return header_; }
	int byteorder() const { return byteorder_; }
	bool proc() const { return proc_; }
	
protected:
	uint32 iface_handle_;
	uint16 timeout_;
	Common_Packet_Format * cpf_;
	Message_Request * cip_data_;
	ENIP * header_;
	int byteorder_;
	bool proc_;
};


class Common_Packet_Format final
{
public:
	Common_Packet_Format();
	~Common_Packet_Format();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextENIP * t_context);
	
	// Member access functions
	uint16 count() const { return count_; }
	Address * address() const { return address_; }
	Data * data() const { return data_; }
	vector<Data *> * additional() const { return additional_; }
	int byteorder() const { return byteorder_; }
	bool proc() const { return proc_; }
	
protected:
	uint16 count_;
	Address * address_;
	Data * data_;
	vector<Data *> * additional_;
	Data * additional__elem_;
	int byteorder_;
	bool proc_;
};


class Address final
{
public:
	Address();
	~Address();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextENIP * t_context);
	
	// Member access functions
	uint16 id() const { return id_; }
	uint16 len() const { return len_; }
	bytestring const & data() const { return data_; }
	int byteorder() const { return byteorder_; }
	bool proc() const { return proc_; }
	
protected:
	uint16 id_;
	uint16 len_;
	bytestring data_;
	int byteorder_;
	bool proc_;
};


class Data final
{
public:
	Data();
	~Data();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint16 id() const { return id_; }
	uint16 len() const { return len_; }
	uint16 count_case_index() const	{ return count_case_index_; }
	uint16 connected_data_item() const
		{
		switch ( count_case_index() )
			{
			case ((uint16) 177):
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/ray/workspace/zeek-plugin-enip/src/enip-protocol.pac:267:connected_data_item", (int64)count_case_index(), "CONNECTED_TRANSPORT");
				break;
			}
		return connected_data_item_;
		}
	int byteorder() const { return byteorder_; }
	
protected:
	uint16 id_;
	uint16 len_;
	uint16 count_case_index_;
	uint16 connected_data_item_;
	int byteorder_;
};


class UCMM final
{
public:
	UCMM();
	~UCMM();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint16 item_count() const { return item_count_; }
	uint16 addr_type_ID() const { return addr_type_ID_; }
	uint16 addr_length() const { return addr_length_; }
	uint16 data_type_ID() const { return data_type_ID_; }
	uint16 data_len() const { return data_len_; }
	bytestring const & MR() const { return MR_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint16 item_count_;
	uint16 addr_type_ID_;
	uint16 addr_length_;
	uint16 data_type_ID_;
	uint16 data_len_;
	bytestring MR_;
	int byteorder_;
};


class Sock_Info final
{
public:
	Sock_Info();
	~Sock_Info();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	int16 sin_family() const { return sin_family_; }
	uint16 sin_port() const { return sin_port_; }
	uint32 sin_addr() const { return sin_addr_; }
	vector<uint8> * sin_zero() const { return sin_zero_; }
	int byteorder() const { return byteorder_; }
	
protected:
	int16 sin_family_;
	uint16 sin_port_;
	uint32 sin_addr_;
	vector<uint8> * sin_zero_;
	uint8 sin_zero__elem_;
	int byteorder_;
};


class Nop final
{
public:
	Nop();
	~Nop();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	bytestring const & unused() const { return unused_; }
	int byteorder() const { return byteorder_; }
	
protected:
	bytestring unused_;
	int byteorder_;
};


class List_Services final
{
public:
	List_Services();
	~List_Services();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextENIP * t_context);
	
	// Member access functions
	uint16 item_count() const { return item_count_; }
	vector<Target_Item_Services *> * data() const { return data_; }
	int byteorder() const { return byteorder_; }
	bool proc() const { return proc_; }
	
protected:
	uint16 item_count_;
	vector<Target_Item_Services *> * data_;
	Target_Item_Services * data__elem_;
	int byteorder_;
	bool proc_;
};


class List_Identity final
{
public:
	List_Identity();
	~List_Identity();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextENIP * t_context);
	
	// Member access functions
	uint16 item_count() const { return item_count_; }
	uint16 response_id() const { return response_id_; }
	uint16 length() const { return length_; }
	uint16 encap_version() const { return encap_version_; }
	Sock_Info * sock_info() const { return sock_info_; }
	uint16 vendor() const { return vendor_; }
	uint16 device_type() const { return device_type_; }
	uint16 product_code() const { return product_code_; }
	uint8 revision_high() const { return revision_high_; }
	uint8 revision_low() const { return revision_low_; }
	uint16 status() const { return status_; }
	uint32 serial_number() const { return serial_number_; }
	uint8 product_name_len() const { return product_name_len_; }
	bytestring const & product_name() const { return product_name_; }
	uint8 state() const { return state_; }
	int byteorder() const { return byteorder_; }
	bool proc() const { return proc_; }
	
protected:
	uint16 item_count_;
	uint16 response_id_;
	uint16 length_;
	uint16 encap_version_;
	Sock_Info * sock_info_;
	uint16 vendor_;
	uint16 device_type_;
	uint16 product_code_;
	uint8 revision_high_;
	uint8 revision_low_;
	uint16 status_;
	uint32 serial_number_;
	uint8 product_name_len_;
	bytestring product_name_;
	uint8 state_;
	int byteorder_;
	bool proc_;
};


class List_Interfaces final
{
public:
	List_Interfaces();
	~List_Interfaces();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data, ContextENIP * t_context);
	
	// Member access functions
	uint16 item_count() const { return item_count_; }
	vector<Target_Item *> * data() const { return data_; }
	int byteorder() const { return byteorder_; }
	bool proc() const { return proc_; }
	
protected:
	uint16 item_count_;
	vector<Target_Item *> * data_;
	Target_Item * data__elem_;
	int byteorder_;
	bool proc_;
};


class Type_Data final
{
public:
	Type_Data(uint16 type);
	~Type_Data();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint16 data_case_index() const	{ return data_case_index_; }
	uint8 boolean() const
		{
		switch ( data_case_index() )
			{
			case ((uint16) 193):
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/ray/workspace/zeek-plugin-enip/src/enip-protocol.pac:325:boolean", (int64)data_case_index(), "BOOL");
				break;
			}
		return boolean_;
		}
	uint16 sint() const
		{
		switch ( data_case_index() )
			{
			case ((uint16) 194):
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/ray/workspace/zeek-plugin-enip/src/enip-protocol.pac:326:sint", (int64)data_case_index(), "SINT");
				break;
			}
		return sint_;
		}
	uint32 integer() const
		{
		switch ( data_case_index() )
			{
			case ((uint16) 195):
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/ray/workspace/zeek-plugin-enip/src/enip-protocol.pac:327:integer", (int64)data_case_index(), "INT");
				break;
			}
		return integer_;
		}
	uint32 dint() const
		{
		switch ( data_case_index() )
			{
			case ((uint16) 196):
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/ray/workspace/zeek-plugin-enip/src/enip-protocol.pac:328:dint", (int64)data_case_index(), "DINT");
				break;
			}
		return dint_;
		}
	uint32 real() const
		{
		switch ( data_case_index() )
			{
			case ((uint16) 202):
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/ray/workspace/zeek-plugin-enip/src/enip-protocol.pac:329:real", (int64)data_case_index(), "REAL");
				break;
			}
		return real_;
		}
	uint32 dword() const
		{
		switch ( data_case_index() )
			{
			case ((uint16) 211):
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/ray/workspace/zeek-plugin-enip/src/enip-protocol.pac:330:dword", (int64)data_case_index(), "DWORD");
				break;
			}
		return dword_;
		}
	uint64 lint() const
		{
		switch ( data_case_index() )
			{
			case ((uint16) 197):
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/ray/workspace/zeek-plugin-enip/src/enip-protocol.pac:331:lint", (int64)data_case_index(), "LINT");
				break;
			}
		return lint_;
		}
	uint16 type() const { return type_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint16 data_case_index_;
	uint8 boolean_;
	uint16 sint_;
	uint32 integer_;
	uint32 dint_;
	uint32 real_;
	uint32 dword_;
	uint64 lint_;
	uint16 type_;
	int byteorder_;
};


class Read_Tag final
{
public:
	Read_Tag();
	~Read_Tag();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint16 number() const { return number_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint16 number_;
	int byteorder_;
};


class Read_Tag_Reply final
{
public:
	Read_Tag_Reply();
	~Read_Tag_Reply();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint16 type() const { return type_; }
	Type_Data * data() const { return data_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint16 type_;
	Type_Data * data_;
	int byteorder_;
};


class Read_Tag_Fragmented final
{
public:
	Read_Tag_Fragmented();
	~Read_Tag_Fragmented();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint16 number() const { return number_; }
	uint32 offset() const { return offset_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint16 number_;
	uint32 offset_;
	int byteorder_;
};


class Read_Tag_Fragmented_Reply final
{
public:
	Read_Tag_Fragmented_Reply();
	~Read_Tag_Fragmented_Reply();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint16 type() const { return type_; }
	bytestring const & data() const { return data_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint16 type_;
	bytestring data_;
	int byteorder_;
};


class Write_Tag final
{
public:
	Write_Tag();
	~Write_Tag();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint16 type() const { return type_; }
	uint16 number() const { return number_; }
	Type_Data * data() const { return data_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint16 type_;
	uint16 number_;
	Type_Data * data_;
	int byteorder_;
};


class Write_Tag_Fragmented final
{
public:
	Write_Tag_Fragmented();
	~Write_Tag_Fragmented();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint16 type() const { return type_; }
	uint32 number() const { return number_; }
	uint32 offset() const { return offset_; }
	bytestring const & data() const { return data_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint16 type_;
	uint32 number_;
	uint32 offset_;
	bytestring data_;
	int byteorder_;
};


class Read_Modify_Write_Tag final
{
public:
	Read_Modify_Write_Tag();
	~Read_Modify_Write_Tag();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint16 size() const { return size_; }
	bytestring const & or_mask() const { return or_mask_; }
	bytestring const & and_mask() const { return and_mask_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint16 size_;
	bytestring or_mask_;
	bytestring and_mask_;
	int byteorder_;
};


class Multiple_Service_Packet final
{
public:
	Multiple_Service_Packet();
	~Multiple_Service_Packet();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint16 number() const { return number_; }
	vector<uint16> * offsets() const { return offsets_; }
	vector<CIP_PDU *> * service_packets() const { return service_packets_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint16 number_;
	vector<uint16> * offsets_;
	uint16 offsets__elem_;
	vector<CIP_PDU *> * service_packets_;
	CIP_PDU * service_packets__elem_;
	int byteorder_;
};


class Get_Instance_Attribute_List final
{
public:
	Get_Instance_Attribute_List();
	~Get_Instance_Attribute_List();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint16 number() const { return number_; }
	vector<uint16> * attributes() const { return attributes_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint16 number_;
	vector<uint16> * attributes_;
	uint16 attributes__elem_;
	int byteorder_;
};


class Attribute final
{
public:
	Attribute();
	~Attribute();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint32 instance_id() const { return instance_id_; }
	uint16 symbol_name_len() const { return symbol_name_len_; }
	bytestring const & name() const { return name_; }
	bytestring const & symbol_type() const { return symbol_type_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint32 instance_id_;
	uint16 symbol_name_len_;
	bytestring name_;
	bytestring symbol_type_;
	int byteorder_;
};


class Get_Instance_Attribute_List_Reply final
{
public:
	Get_Instance_Attribute_List_Reply();
	~Get_Instance_Attribute_List_Reply();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	vector<Attribute *> * attributes() const { return attributes_; }
	int byteorder() const { return byteorder_; }
	
protected:
	vector<Attribute *> * attributes_;
	Attribute * attributes__elem_;
	int byteorder_;
};


class Get_Attribute_List final
{
public:
	Get_Attribute_List();
	~Get_Attribute_List();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint16 number() const { return number_; }
	vector<uint16> * list() const { return list_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint16 number_;
	vector<uint16> * list_;
	uint16 list__elem_;
	int byteorder_;
};


class Attribute_Success_Value final
{
public:
	Attribute_Success_Value();
	~Attribute_Success_Value();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint16 number() const { return number_; }
	uint16 success() const { return success_; }
	uint16 value() const { return value_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint16 number_;
	uint16 success_;
	uint16 value_;
	int byteorder_;
};


class Get_Attribute_List_Reply final
{
public:
	Get_Attribute_List_Reply();
	~Get_Attribute_List_Reply();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint16 number() const { return number_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint16 number_;
	int byteorder_;
};


class Message_Request final
{
public:
	Message_Request();
	~Message_Request();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 service() const { return service_; }
	bytestring const & data() const { return data_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 service_;
	bytestring data_;
	int byteorder_;
};


class Message_Reply final
{
public:
	Message_Reply(bool is_orig);
	~Message_Reply();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 service() const { return service_; }
	uint8 reserved() const { return reserved_; }
	uint8 status() const { return status_; }
	uint8 extented_status() const { return extented_status_; }
	uint8 data_case_index() const	{ return data_case_index_; }
	Read_Tag_Reply * read_tag() const
		{
		switch ( data_case_index() )
			{
			case ((uint8) 204):
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/ray/workspace/zeek-plugin-enip/src/enip-protocol.pac:437:read_tag", (int64)data_case_index(), "READ_TAG_REPLY");
				break;
			}
		return read_tag_;
		}
	Read_Tag_Fragmented_Reply * read_tag_fragmented() const
		{
		switch ( data_case_index() )
			{
			case ((uint8) 210):
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/ray/workspace/zeek-plugin-enip/src/enip-protocol.pac:438:read_tag_fragmented", (int64)data_case_index(), "READ_TAG_FRAGMENTED_REPLY");
				break;
			}
		return read_tag_fragmented_;
		}
	bytestring const & write_tag() const
		{
		switch ( data_case_index() )
			{
			case ((uint8) 205):
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/ray/workspace/zeek-plugin-enip/src/enip-protocol.pac:439:write_tag", (int64)data_case_index(), "WRITE_TAG_REPLY");
				break;
			}
		return write_tag_;
		}
	Write_Tag_Fragmented * write_tag_fragmented() const
		{
		switch ( data_case_index() )
			{
			case ((uint8) 211):
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/ray/workspace/zeek-plugin-enip/src/enip-protocol.pac:440:write_tag_fragmented", (int64)data_case_index(), "WRITE_TAG_FRAGMENTED_REPLY");
				break;
			}
		return write_tag_fragmented_;
		}
	bytestring const & read_modify() const
		{
		switch ( data_case_index() )
			{
			case ((uint8) 206):
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/ray/workspace/zeek-plugin-enip/src/enip-protocol.pac:441:read_modify", (int64)data_case_index(), "READ_MODIFY_WRITE_TAG_REPLY");
				break;
			}
		return read_modify_;
		}
	Get_Attribute_List_Reply * get_attribute_all() const
		{
		switch ( data_case_index() )
			{
			case ((uint8) 129):
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/ray/workspace/zeek-plugin-enip/src/enip-protocol.pac:442:get_attribute_all", (int64)data_case_index(), "GET_ATTRIBUTE_ALL_REPLY");
				break;
			}
		return get_attribute_all_;
		}
	bytestring const & get_instance_attribute() const
		{
		switch ( data_case_index() )
			{
			case ((uint8) 213):
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/ray/workspace/zeek-plugin-enip/src/enip-protocol.pac:443:get_instance_attribute", (int64)data_case_index(), "GET_INSTANCE_ATTRIBUTE_LIST_REPLY");
				break;
			}
		return get_instance_attribute_;
		}
	Multiple_Service_Packet * multiple_service_packet() const
		{
		switch ( data_case_index() )
			{
			case ((uint8) 138):
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/ray/workspace/zeek-plugin-enip/src/enip-protocol.pac:444:multiple_service_packet", (int64)data_case_index(), "MULTIPLE_SERVICE_PACKET_REPLY");
				break;
			}
		return multiple_service_packet_;
		}
	bytestring const & get_attribute_single() const
		{
		switch ( data_case_index() )
			{
			case ((uint8) 142):
				break;  // OK
			default:
				throw binpac::ExceptionInvalidCase("/home/ray/workspace/zeek-plugin-enip/src/enip-protocol.pac:445:get_attribute_single", (int64)data_case_index(), "GET_ATTRIBUTE_SINGLE_REPLY");
				break;
			}
		return get_attribute_single_;
		}
	bytestring const & unknown() const
		{
		return unknown_;
		}
	bool is_orig() const { return is_orig_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 service_;
	uint8 reserved_;
	uint8 status_;
	uint8 extented_status_;
	uint8 data_case_index_;
	Read_Tag_Reply * read_tag_;
	Read_Tag_Fragmented_Reply * read_tag_fragmented_;
	bytestring write_tag_;
	Write_Tag_Fragmented * write_tag_fragmented_;
	bytestring read_modify_;
	Get_Attribute_List_Reply * get_attribute_all_;
	bytestring get_instance_attribute_;
	Multiple_Service_Packet * multiple_service_packet_;
	bytestring get_attribute_single_;
	bytestring unknown_;
	bool is_orig_;
	int byteorder_;
};


class Forward_Open final
{
public:
	Forward_Open();
	~Forward_Open();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	bytestring const & data() const { return data_; }
	int byteorder() const { return byteorder_; }
	
protected:
	bytestring data_;
	int byteorder_;
};


class CIP_PDU final
{
public:
	CIP_PDU();
	~CIP_PDU();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	bytestring const & data() const { return data_; }
	int byteorder() const { return byteorder_; }
	
protected:
	bytestring data_;
	int byteorder_;
};


class Connexion_Bind final
{
public:
	Connexion_Bind();
	~Connexion_Bind();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 status() const { return status_; }
	uint8 ext_status() const { return ext_status_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 status_;
	uint8 ext_status_;
	int byteorder_;
};


class Application_Lookup_Service_Response final
{
public:
	Application_Lookup_Service_Response();
	~Application_Lookup_Service_Response();
	int Parse(const_byteptr const t_begin_of_data, const_byteptr const t_end_of_data);
	
	// Member access functions
	uint8 instance_count() const { return instance_count_; }
	vector<uint8> * list() const { return list_; }
	int byteorder() const { return byteorder_; }
	
protected:
	uint8 instance_count_;
	vector<uint8> * list_;
	uint8 list__elem_;
	int byteorder_;
};


class ENIP_Conn final : public binpac::ConnectionAnalyzer
{
public:
	ENIP_Conn(ZeekAnalyzer const & zeek_analyzer);
	~ENIP_Conn();
	
	// Member access functions
	ENIP_Flow * upflow() const { return upflow_; }
	ENIP_Flow * downflow() const { return downflow_; }
	ZeekAnalyzer const & zeek_analyzer() const { return zeek_analyzer_; }
	
	void NewData(bool is_orig, const_byteptr begin, const_byteptr end);
	void NewGap(bool is_orig, int gap_length);
	void FlowEOF(bool is_orig);
	
protected:
	ENIP_Flow * upflow_;
	ENIP_Flow * downflow_;
	ZeekAnalyzer zeek_analyzer_;
};


    #define SIZE 8
    #define NAME_SIZE 16
    #define LEN_4 0x0004
    #define LEN_8 0x0008
    #define LEN_10 0x0010
    #define COUNT_1 0x0001
    #define RESERVED_MASK1 0x1F00
    #define RESERVED_MASK2 0xC000
    #define RESERVED_MASK3 0x00FE
    #define ZERO_1B 0x00
    #define ZERO_2B 0x0000
    #define ZERO_4B 0x00000000
    

class ENIP_Flow final : public binpac::FlowAnalyzer
{
public:
	ENIP_Flow(ENIP_Conn * connection, bool is_orig);
	~ENIP_Flow();
	
	// Member access functions
	ENIP_Conn * connection() const { return connection_; }
	bool is_orig() const { return is_orig_; }
	
	void NewData(const_byteptr t_begin_of_data, const_byteptr t_end_of_data);
	void NewGap(int gap_length);
	void FlowEOF();
	
	// Functions
	bool enip(ENIP * header);
	bool enip_data_address(Address * address);
	bool enip_common_packet_format(uint16 count);
	bool enip_target_item(uint16 type_code, uint16 length);
	bool enip_target_item_services(Target_Item_Services * target_item_services);
	bool enip_register(uint16 protocol, uint16 options);
	bool enip_rr_unit(uint16 command, RR_Unit * rr_unit);
	bool enip_list(uint16 item_count);
	bool enip_list_identity(List_Identity * list_identity);
	
protected:
	ENIP_PDU * dataunit_;
	ContextENIP * context_;
	ENIP_Conn * connection_;
	bool is_orig_;
};

} // namespace ENIP
}  // namespace binpac
#endif /* _home_ray_workspace_zeek_plugin_enip_src_enip_pac_h */
