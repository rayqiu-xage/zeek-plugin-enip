# This file was automatically generated by bifcl from /home/ray/workspace/zeek-plugin-enip/src/events.bif (plugin mode).

export {
## Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
## SPDX-License-Identifier: BSD-3-Clause

#######################################
## Generated for all the ENIP headers #
#######################################
## c: The connection the ENIP communication is part of.
## is_orig: True if this reflects originator-side activity.
## cmd: Command code (see enip-protocol for all codes).
## length: Datagram length (including header length).
## sh: Session Handle, the session number.
## st: Status (see enip-protocol for all status).
## sender_context: Sender context, used to match requests with their associated replies.
## options: Options, no particular use for this field has not yet been specified.
## 
global enip: event(c: connection , is_orig: bool , command: count , length: count , session_handle: count , status: count , sender_context: string , options: count );


###########################################################
## Generated for a data or address item in ENIP datagrams #
###########################################################
## c: The connection the ENIP communication is part of.
## is_orig: True if this reflects originator-side activity.
## id: Type of item encapsulated.
## length: Length in bytes of the Data field.
## data: The encapsulated data packet.
## 
global enip_data_address: event(c: connection , is_orig: bool , id: count , length: count , data: string );


##############################################################################
## Generated for encapsulated packets, formatted in the Common Packet Format #
##############################################################################
## c: The connection the ENIP communication is part of.
## is_orig: True if this reflects originator-side activity.
## item_count: Number of item to follow (at least 2).
## 
global enip_common_packet_format: event(c: connection , is_orig: bool , item_count: count );


## Generated for the items in reply to a List Identities or List Interfaces request.
##
## c: The connection the ENIP communication is part of.
## is_orig: True if this reflects originator-side activity.
## type_code: Item type code.
## length: Item length.
## 
global enip_target_item: event(c: connection , is_orig: bool , type_code: count , length: count );


################################################################
## Generated for the items in reply to a List Services request #
################################################################
## c: The connection the ENIP communication is part of.
## is_orig: True if this reflects originator-side activity.
## type_code: Item type code.
## length: Item length.
## protocol: Version of the encapsulated protocol.
## flags: Capability flags.
## name: Name of service.
## 
global enip_target_item_services: event(c: connection , is_orig: bool , type_code: count , length: count , protocol: count , flags: count , name: string );


############################################
## Generated for the session registrations #
############################################
## c: The connection the ENIP communication is part of.
## is_orig: True if this reflects originator-side activity.
## protocol: Requested protocol.
## options: Options flags.
## 
global enip_register: event(c: connection , is_orig: bool , protocol: count , options: count );


###################################
## Generated for the List replies #
###################################
## c: The connection the ENIP communication is part of.
## is_orig: True if this reflects originator-side activity.
## item_count: Number of items to follow.
## 
global enip_list: event(c: connection , is_orig: bool , item_count: count );


############################################
## Generated for the List identity replies #
############################################
## c: The connection the ENIP communication is part of.
## is_orig: True if this reflects originator-side activity.
## item_count: Number of items to follow.
## self-explanatory parameters
## 
global enip_list_identity: event(c: connection , is_orig: bool , device_ip: count , vendor: count , device_type: count , product_code: count , revision_high: count , revision_low: count , status: count , serial_number: count , product_name: string , state: count );


#################################
## Generated for the CIP events #
#################################
## c: The connection the CIP communication is part of.
## is_orig: True if this reflects originator-side activity.
## self-explanatory parameters
##         
global cip: event(c: connection , is_orig: bool , service: count , data: string );


###################################
## Generated for debugging events #
###################################
## c: The connection the communication is part of.
## is_orig: True if this reflects originator-side activity.
## self-explanatory parameters
##         
global enip_cip_debug: event(c: connection , is_orig: bool , raw_data: string );


} # end of export section
module GLOBAL;
